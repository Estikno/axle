#include "axpch.hpp"

#include "InputState.hpp"

#include <GLFW/glfw3.h>

namespace Axle {
    Keys ConvertGLFWKeys(i32 glfw_key) {
        switch (glfw_key) {
            case GLFW_KEY_BACKSPACE:
                return Keys::Backspace;
            case GLFW_KEY_ENTER:
                return Keys::Enter;
            case GLFW_KEY_TAB:
                return Keys::Tab;
            case GLFW_KEY_LEFT_SHIFT:
                return Keys::LShift;
            case GLFW_KEY_RIGHT_SHIFT:
                return Keys::RShift;
            case GLFW_KEY_LEFT_CONTROL:
                return Keys::LControl;
            case GLFW_KEY_RIGHT_CONTROL:
                return Keys::RControl;
            case GLFW_KEY_LEFT_ALT:
                return Keys::LMenu;
            case GLFW_KEY_RIGHT_ALT:
                return Keys::RMenu;
            case GLFW_KEY_LEFT_SUPER:
                return Keys::LWin;
            case GLFW_KEY_RIGHT_SUPER:
                return Keys::RWin;
            case GLFW_KEY_ESCAPE:
                return Keys::Escape;
            case GLFW_KEY_SPACE:
                return Keys::Space;
            case GLFW_KEY_PAGE_UP:
                return Keys::Prior;
            case GLFW_KEY_PAGE_DOWN:
                return Keys::Next;
            case GLFW_KEY_END:
                return Keys::End;
            case GLFW_KEY_HOME:
                return Keys::Home;
            case GLFW_KEY_LEFT:
                return Keys::Left;
            case GLFW_KEY_UP:
                return Keys::Up;
            case GLFW_KEY_RIGHT:
                return Keys::Right;
            case GLFW_KEY_DOWN:
                return Keys::Down;
            case GLFW_KEY_INSERT:
                return Keys::Insert;
            case GLFW_KEY_DELETE:
                return Keys::Delete;
            case GLFW_KEY_CAPS_LOCK:
                return Keys::Capital;
            case GLFW_KEY_PRINT_SCREEN:
                return Keys::Snapshot;
            case GLFW_KEY_SCROLL_LOCK:
                return Keys::Scroll;
            case GLFW_KEY_PAUSE:
                return Keys::Pause;
            case GLFW_KEY_MENU:
                return Keys::Apps;
            case GLFW_KEY_KP_0:
                return Keys::Numpad0;
            case GLFW_KEY_KP_1:
                return Keys::Numpad1;
            case GLFW_KEY_KP_2:
                return Keys::Numpad2;
            case GLFW_KEY_KP_3:
                return Keys::Numpad3;
            case GLFW_KEY_KP_4:
                return Keys::Numpad4;
            case GLFW_KEY_KP_5:
                return Keys::Numpad5;
            case GLFW_KEY_KP_6:
                return Keys::Numpad6;
            case GLFW_KEY_KP_7:
                return Keys::Numpad7;
            case GLFW_KEY_KP_8:
                return Keys::Numpad8;
            case GLFW_KEY_KP_9:
                return Keys::Numpad9;
            case GLFW_KEY_KP_ADD:
                return Keys::Add;
            case GLFW_KEY_KP_SUBTRACT:
                return Keys::Subtract;
            case GLFW_KEY_KP_MULTIPLY:
                return Keys::Multiply;
            case GLFW_KEY_KP_DIVIDE:
                return Keys::Divide;
            case GLFW_KEY_KP_DECIMAL:
                return Keys::Decimal;
            case GLFW_KEY_KP_EQUAL:
                return Keys::NumpadEqual;

            case GLFW_KEY_F1:
                return Keys::F1;
            case GLFW_KEY_F2:
                return Keys::F2;
            case GLFW_KEY_F3:
                return Keys::F3;
            case GLFW_KEY_F4:
                return Keys::F4;
            case GLFW_KEY_F5:
                return Keys::F5;
            case GLFW_KEY_F6:
                return Keys::F6;
            case GLFW_KEY_F7:
                return Keys::F7;
            case GLFW_KEY_F8:
                return Keys::F8;
            case GLFW_KEY_F9:
                return Keys::F9;
            case GLFW_KEY_F10:
                return Keys::F10;
            case GLFW_KEY_F11:
                return Keys::F11;
            case GLFW_KEY_F12:
                return Keys::F12;

            case GLFW_KEY_A:
                return Keys::A;
            case GLFW_KEY_B:
                return Keys::B;
            case GLFW_KEY_C:
                return Keys::C;
            case GLFW_KEY_D:
                return Keys::D;
            case GLFW_KEY_E:
                return Keys::E;
            case GLFW_KEY_F:
                return Keys::F;
            case GLFW_KEY_G:
                return Keys::G;
            case GLFW_KEY_H:
                return Keys::H;
            case GLFW_KEY_I:
                return Keys::I;
            case GLFW_KEY_J:
                return Keys::J;
            case GLFW_KEY_K:
                return Keys::K;
            case GLFW_KEY_L:
                return Keys::L;
            case GLFW_KEY_M:
                return Keys::M;
            case GLFW_KEY_N:
                return Keys::N;
            case GLFW_KEY_O:
                return Keys::O;
            case GLFW_KEY_P:
                return Keys::P;
            case GLFW_KEY_Q:
                return Keys::Q;
            case GLFW_KEY_R:
                return Keys::R;
            case GLFW_KEY_S:
                return Keys::S;
            case GLFW_KEY_T:
                return Keys::T;
            case GLFW_KEY_U:
                return Keys::U;
            case GLFW_KEY_V:
                return Keys::V;
            case GLFW_KEY_W:
                return Keys::W;
            case GLFW_KEY_X:
                return Keys::X;
            case GLFW_KEY_Y:
                return Keys::Y;
            case GLFW_KEY_Z:
                return Keys::Z;

            case GLFW_KEY_SEMICOLON:
                return Keys::Semicolon;
            case GLFW_KEY_EQUAL:
                return Keys::Plus;
            case GLFW_KEY_COMMA:
                return Keys::Comma;
            case GLFW_KEY_MINUS:
                return Keys::Minus;
            case GLFW_KEY_PERIOD:
                return Keys::Period;
            case GLFW_KEY_SLASH:
                return Keys::Slash;
            case GLFW_KEY_GRAVE_ACCENT:
                return Keys::Grave;

            default:
                return Keys::Unknown;
        }
    }

    MouseButtons ConvertGLFWMouseButtons(i32 glfw_button) {
        switch (glfw_button) {
            case GLFW_MOUSE_BUTTON_LEFT:
                return MouseButtons::BUTTON_LEFT;
            case GLFW_MOUSE_BUTTON_RIGHT:
                return MouseButtons::BUTTON_RIGHT;
            case GLFW_MOUSE_BUTTON_MIDDLE:
                return MouseButtons::BUTTON_MIDDLE;
            default:
                return MouseButtons::Unknown;
        }
    }
} // namespace Axle
